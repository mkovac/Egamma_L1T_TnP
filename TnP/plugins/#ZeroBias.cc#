#ifndef ZeroBias_H
#define ZeroBias_H

#include <cmath>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <vector>
#include <utility>
#include <TNtuple.h>
#include <TString.h>
#include <bitset>


#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include <FWCore/Framework/interface/Frameworkfwd.h>
#include <FWCore/Framework/interface/Event.h>
#include <FWCore/Framework/interface/ESHandle.h>
#include <FWCore/Utilities/interface/InputTag.h>
#include <DataFormats/PatCandidates/interface/Electron.h>
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"
#include "DataFormats/L1Trigger/interface/EGamma.h"
#include "DataFormats/VertexReco/interface/Vertex.h"


#include "tParameterSet.h"

#include "CommonTools/UtilAlgos/interface/TFileService.h"



//Set this variable to decide the number of triggers that you want to check simultaneously
#define NUMBER_OF_MAXIMUM_TRIGGERS 64


/*
██████  ███████  ██████ ██       █████  ██████   █████  ████████ ██  ██████  ███    ██
██   ██ ██      ██      ██      ██   ██ ██   ██ ██   ██    ██    ██ ██    ██ ████   ██
██   ██ █████   ██      ██      ███████ ██████  ███████    ██    ██ ██    ██ ██ ██  ██
██   ██ ██      ██      ██      ██   ██ ██   ██ ██   ██    ██    ██ ██    ██ ██  ██ ██
██████  ███████  ██████ ███████ ██   ██ ██   ██ ██   ██    ██    ██  ██████  ██   ████
*/

class ZeroBias : public edm::EDAnalyzer {
    public:
        /// Constructor
        explicit ZeroBias(const edm::ParameterSet&);
        /// Destructor
        virtual ~ZeroBias();

    private:
        //----edm control---
        virtual void beginJob() ;
        virtual void beginRun(edm::Run const&, edm::EventSetup const&);
        virtual void analyze(const edm::Event&, const edm::EventSetup&);
        virtual void endJob();
        virtual void endRun(edm::Run const&, edm::EventSetup const&);
        void Initialize();

        TTree *_tree;
        std::string _treeName;
        // -------------------------------------
        // variables to be filled in output tree
        ULong64_t       _indexevents;
        Int_t           _runNumber;
        Int_t           _lumi;

        std::vector<int> _l1tQual;
        std::vector<float> _l1tPt;
        std::vector<float> _l1tEta;
        std::vector<float> _l1tPhi;
        std::vector<int> _l1tIso;
        std::vector<int> _l1tEmuQual;
        std::vector<float> _l1tEmuPt;
        std::vector<float> _l1tEmuEta;
        std::vector<float> _l1tEmuPhi;
        std::vector<int> _l1tEmuIso;
        std::vector<int> _l1tEmuNTT;
        std::vector<int> _l1tEmuHasEM;
        std::vector<int> _l1tEmuIsMerged;
        std::vector<int> _l1tEmuTowerIEta;
        std::vector<int> _l1tEmuTowerIPhi;
        std::vector<int> _l1tEmuRawEt;
        std::vector<int> _l1tEmuIsoEt;

        edm::EDGetTokenT<l1t::TauBxCollection> _L1TauTag  ;
        edm::EDGetTokenT<l1t::TauBxCollection> _L1EmuTauTag  ;


};

/*
██ ███    ███ ██████  ██      ███████ ███    ███ ███████ ███    ██ ████████  █████  ████████ ██  ██████  ███    ██
██ ████  ████ ██   ██ ██      ██      ████  ████ ██      ████   ██    ██    ██   ██    ██    ██ ██    ██ ████   ██
██ ██ ████ ██ ██████  ██      █████   ██ ████ ██ █████   ██ ██  ██    ██    ███████    ██    ██ ██    ██ ██ ██  ██
██ ██  ██  ██ ██      ██      ██      ██  ██  ██ ██      ██  ██ ██    ██    ██   ██    ██    ██ ██    ██ ██  ██ ██
██ ██      ██ ██      ███████ ███████ ██      ██ ███████ ██   ████    ██    ██   ██    ██    ██  ██████  ██   ████
*/

// ----Constructor and Destructor -----
ZeroBias::ZeroBias(const edm::ParameterSet& iConfig) :
_L1TauTag       (consumes<l1t::TauBxCollection>                   (iConfig.getParameter<edm::InputTag>("L1Tau"))),
_L1EmuTauTag    (consumes<l1t::TauBxCollection>                   (iConfig.getParameter<edm::InputTag>("L1EmuTau")))
{
    this -> _treeName = iConfig.getParameter<std::string>("treeName");
    
    this -> Initialize();
    return;
}

ZeroBias::~ZeroBias()
{}

void ZeroBias::beginRun(edm::Run const& iRun, edm::EventSetup const& iSetup)
{
  return;
}

void ZeroBias::Initialize() {
    this -> _indexevents = 0;
    this -> _runNumber = 0;
    this -> _lumi = 0;

    this -> _l1tPt .clear();
    this -> _l1tEta .clear();
    this -> _l1tPhi .clear();
    this -> _l1tQual .clear();
    this -> _l1tIso .clear();
    this -> _l1tEmuPt .clear();
    this -> _l1tEmuEta .clear();
    this -> _l1tEmuPhi .clear();
    this -> _l1tEmuQual .clear();
    this -> _l1tEmuIso .clear();
    this -> _l1tEmuNTT .clear();
    this -> _l1tEmuHasEM .clear();
    this -> _l1tEmuIsMerged .clear();
    this -> _l1tEmuTowerIEta .clear();
    this -> _l1tEmuTowerIPhi .clear();
    this -> _l1tEmuRawEt .clear();
    this -> _l1tEmuIsoEt .clear();

}


void ZeroBias::beginJob()
{
    edm::Service<TFileService> fs;
    this -> _tree = fs -> make<TTree>(this -> _treeName.c_str(), this -> _treeName.c_str());

    //Branches
    this -> _tree -> Branch("EventNumber",  &_indexevents);
    this -> _tree -> Branch("RunNumber",  &_runNumber);
    this -> _tree -> Branch("lumi",  &_lumi);
    this -> _tree -> Branch("l1tPt",  &_l1tPt);
    this -> _tree -> Branch("l1tEta", &_l1tEta);
    this -> _tree -> Branch("l1tPhi", &_l1tPhi);
    this -> _tree -> Branch("l1tQual", &_l1tQual);
    this -> _tree -> Branch("l1tIso", &_l1tIso);
    this -> _tree -> Branch("l1tEmuPt",  &_l1tEmuPt);
    this -> _tree -> Branch("l1tEmuEta", &_l1tEmuEta);
    this -> _tree -> Branch("l1tEmuPhi", &_l1tEmuPhi);
    this -> _tree -> Branch("l1tEmuQual", &_l1tEmuQual);
    this -> _tree -> Branch("l1tEmuIso", &_l1tEmuIso);
    this -> _tree -> Branch("l1tEmuNTT", &_l1tEmuNTT);
    this -> _tree -> Branch("l1tEmuHasEM", &_l1tEmuHasEM);
    this -> _tree -> Branch("l1tEmuIsMerged", &_l1tEmuIsMerged);
    this -> _tree -> Branch("l1tEmuTowerIEta", &_l1tEmuTowerIEta);
    this -> _tree -> Branch("l1tEmuTowerIPhi", &_l1tEmuTowerIPhi);
    this -> _tree -> Branch("l1tEmuRawEt", &_l1tEmuRawEt);
    this -> _tree -> Branch("l1tEmuIsoEt", &_l1tEmuIsoEt);

    return;
}


void ZeroBias::endJob()
{
    return;
}


void ZeroBias::endRun(edm::Run const& iRun, edm::EventSetup const& iSetup)
{
    return;
}


void ZeroBias::analyze(const edm::Event& iEvent, const edm::EventSetup& eSetup)
{
    this -> Initialize();

    _indexevents = iEvent.id().event();
    _runNumber = iEvent.id().run();
    _lumi = iEvent.luminosityBlock();

    edm::Handle< BXVector<l1t::Tau> >  L1TauHandle;
    iEvent.getByToken(_L1TauTag, L1TauHandle);


    //cout<<"ill try this: "<<endl;

    for (l1t::TauBxCollection::const_iterator bx0TauIt = L1TauHandle->begin(0); bx0TauIt != L1TauHandle->end(0) ; bx0TauIt++)
    {
	const l1t::Tau& l1tTau = *bx0TauIt;

	cout<<"FW Tau, pT = "<<l1tTau.pt()<<", eta = "<<l1tTau.eta()<<", phi = "<<l1tTau.phi()<<endl;

	this -> _l1tPt.push_back(l1tTau.pt());
	this -> _l1tEta.push_back(l1tTau.eta());
	this -> _l1tPhi.push_back(l1tTau.phi());
	this -> _l1tIso.push_back(l1tTau.hwIso());
	this -> _l1tQual.push_back(l1tTau.hwQual());

    }

    edm::Handle< BXVector<l1t::Tau> >  L1EmuTauHandle;
    try {iEvent.getByToken(_L1EmuTauTag, L1EmuTauHandle);} catch (...) {;}

    if (L1EmuTauHandle.isValid())
      {	
	for (l1t::TauBxCollection::const_iterator bx0EmuTauIt = L1EmuTauHandle->begin(0); bx0EmuTauIt != L1EmuTauHandle->end(0) ; bx0EmuTauIt++)
	  {
	    const l1t::Tau& l1tEmuTau = *bx0EmuTauIt;
	    
	    cout<<"Emul Tau, pT = "<<l1tEmuTau.pt()<<", eta = "<<l1tEmuTau.eta()<<", phi = "<<l1tEmuTau.phi()<<endl;
	    
	    this -> _l1tEmuPt       .push_back(l1tEmuTau.pt());
	    this -> _l1tEmuEta      .push_back(l1tEmuTau.eta());
	    this -> _l1tEmuPhi      .push_back(l1tEmuTau.phi());
	    this -> _l1tEmuIso      .push_back(l1tEmuTau.hwIso());
	    this -> _l1tEmuNTT      .push_back(l1tEmuTau.nTT());
	    this -> _l1tEmuQual     .push_back(l1tEmuTau.hwQual());
	    this -> _l1tEmuHasEM    .push_back(l1tEmuTau.hasEM());
	    this -> _l1tEmuIsMerged .push_back(l1tEmuTau.isMerged());
	    this -> _l1tEmuTowerIEta.push_back(l1tEmuTau.towerIEta());
	    this -> _l1tEmuTowerIPhi.push_back(l1tEmuTau.towerIPhi());
	    this -> _l1tEmuRawEt    .push_back(l1tEmuTau.rawEt());
	    this -> _l1tEmuIsoEt    .push_back(l1tEmuTau.isoEt());

	  }
      }

    this -> _tree -> Fill();

}

#include <FWCore/Framework/interface/MakerMacros.h>
DEFINE_FWK_MODULE(ZeroBias);

#endif //ZeroBias_H
